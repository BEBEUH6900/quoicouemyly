class File:
    ''' classe File
    création d’une instance File avec une liste
    '''
    def __init__(self):
        self.L = []
    def vide(self):
        return self.L == []
    def defiler(self):
        assert not self.vide(), "file vide"
        return self.L.pop(0)
    def enfiler(self,x):
        self.L.append(x)
    def taille(self):
        return len(self.L)
    def sommet(self):
        return self.L[0]
    def present(self,x):
        return x in self.L

G = dict()
G['a'] = ['d','b']
G['b'] = ['a','c','h']
G['c'] = ['b']
G['d'] = ['f','g','e','a']
G['e'] = ['d']
G['f'] = ['d']
G['g'] = ['d']
G['h'] = ['b']

def aretes(G):
    s = 0
    alphabet = ['a','b','c','d','e','f','g','h']
    for i in range (0,len(alphabet)):
        s += (len(G[alphabet[i]]))
    s = s//2
    return s

def cycle(G):
    cycle = 0
    if aretes(G) > aretes(G) -1:
        cycle += 1
    return cycle

def voisin(G,sommet):
    return G[sommet]

def detection_cycle(G,sommet):
    sommets_visites=[]
    f = File()
    sommets_visites.append(sommet)
    f.enfiler((sommet,-1))
    while f.vide()==False:
        (tmp,parent)=f.defiler()
        voisins = voisin(G,tmp)
        for vois in voisins:
            if vois not in sommets_visites:
                sommets_visites.append(vois)
                f.enfiler((vois,tmp))
            elif vois!=parent:
                return True
    return False

print(detection_cycle(G,'d'))
